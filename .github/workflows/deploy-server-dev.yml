name: Deploy Server to ECS Dev

on:
  pull_request:
    types: [ closed ]
    branches: [ develop ]
    paths:
      - 'server/**'
  workflow_dispatch:
  
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-1' }}
  ROLE_ARN: ${{ secrets.AWS_ROLE_ARN || 'arn:aws:iam::412381775063:role/TerraformDeployRole' }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER || 'mapapp-ecs' }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE || 'mapapp-rails' }}
  TASK_DEFINITION: ${{ vars.TASK_DEFINITION || 'mapapp-rails' }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME || 'rails' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'mapapp-rails' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true)
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve ECR registry
        id: ecr
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "registry=${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> "$GITHUB_OUTPUT"
          echo "repository=${{ env.ECR_REPOSITORY }}" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin ${{ steps.ecr.outputs.registry }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.ecr.outputs.registry }}/${{ steps.ecr.outputs.repository }}
          tags: |
            type=raw,value=latest
            type=raw,value=dev-${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Clean task definition
        run: |
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .deregisteredAt, .registeredBy, .enableFaultInjection)' task-definition.json > cleaned-task-definition.json
          mv cleaned-task-definition.json task-definition.json

      - name: Render updated task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.meta.outputs.tags }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Output deployment summary
        run: |
          echo "## ðŸš€ Deployed to ECS Dev" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY